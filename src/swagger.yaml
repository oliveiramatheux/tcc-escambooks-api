openapi: 3.0.3
info:
  title: Escambooks API
  description: Swagger documentation of Escambooks API
  contact:
    email: matheus.oliveira0730@gmail.com
  version: 1.0.11
servers:
  - url: http://localhost:8000/api
tags:
  - name: health-check
    description: Check health of application
  - name: auth
    description: Authentication and security routes
  - name: users
    description: All related to users
  - name: admin
    description: Routes for admins
paths:
  /auth:
    post:
      summary: Authentication
      description: Authentication
      tags:
        - auth
      responses:
        '200':
          description: Success. Returns the list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthPostResponse'
        '400':
          description: Unauthorized. Invalid password.
        '401':
          description: Unauthorized. This user not verify email.
        '404':
          description: Not found. User not found.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthPostBody'
  /auth/verify:
    post:
      summary: Verify account
      description: Verify email from new users
      tags:
        - auth
      responses:
        '200':
          description: Success. Returns the verified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserResponse'
        '400':
          description: Unauthorized. An error occured when verify this email.
        '401':
          description: Unauthorized. Invalid secret token for this email.
        '404':
          description: Not found. User not exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyUserBody'
  /auth/send/email-verify:
    post:
      summary: Send email to verify account
      description: Send email to verify email from new users
      tags:
        - auth
      responses:
        '200':
          description: Success. Returns the user's email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailBody'
        '400':
          description: Unauthorized. An error occured when verify this email.
        '401':
          description: Unauthorized. This user alredy verify email.
        '404':
          description: Not found. User not exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailBody'
  /auth/send/email-reset-password:
    post:
      summary: Send email to reset password
      description: Send email to the user that forgot his password to reset his password
      tags:
        - auth
      responses:
        '200':
          description: Success. Returns the user's email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailBody'
        '401':
          description: Unauthorized. This user dont have password.
        '404':
          description: Not found. User not exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailBody'
  /auth/reset-password-token:
    post:
      summary: Reset password
      description: Reset user's password with reset token from email
      tags:
        - auth
      responses:
        '200':
          description: Success. Returns the user's email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailBody'
        '400':
          description: Bad Request. An error occured when update this password.
        '401':
          description: Unauthorized. Invalid reset token for this email.
        '404':
          description: Not found. User not exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordTokenBody'
  /auth/reset-password:
    post:
      summary: Reset password
      description: Reset user's password with his credentials
      security:
        - BearerAuth: []
      tags:
        - auth
      responses:
        '200':
          description: Success. Returns the user's email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailBody'
        '400':
          description: Bad Request. An error occured when update this password.
        '401':
          description: Unauthorized. Invalid password.
        '404':
          description: Not found. User not exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordBody'
  /health-check:
    get:
      summary: Check health of application
      description: Check health of application
      tags:
        - health-check
      responses:
        200:
          description: Health of application is ok
          content:
            text/plain:
              schema:
                type: string
                example: Server is ok
  /admin/users:
    get:
      summary: Get all users
      description: Route to retrieve all users.
      security:
        - BearerAuth: []
      tags:
        - admin
      responses:
        '200':
          description: Success. Returns the authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersArray'
        '401':
          description: Unauthorized. Authentication-related errors.
        '404':
          description: Not found. No users on the platform.
  /users:
    post:
      summary: Create new user
      description: Route for user's registration
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserBody'
      responses:
        '200':
          description: Success. Returns the created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Unauthorized. An eror occured when create this user.
        '409':
          description: Conflict. User email alredy exist.
  /users/{id}:
    get:
      summary: Get one user
      description: Get user by his ID
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: Success. Returns the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserByIdResponse'
        '404':
          description: Not found. User not found.
    delete:
      summary: Delete user
      description: Delete user by his ID
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: Success. Returns the deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserByIdResponse'
        '404':
          description: Not found. User not found.
    patch:
      summary: Update user
      description: Update user by his ID
      tags:
        - users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserBody'
      responses:
        '200':
          description: Success. Returns the updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
        '404':
          description: Not found. User not exist.
        '409':
          description: Conflict. User email alredy exist.
        '400':
          description: Bad Request. An error occured when update this user.
  /users/username/{name}:
    get:
      summary: Get users by name
      description: Get users filtered by name
      tags:
        - users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: The name to filter users
      responses:
        '200':
          description: Success. Returns a list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersArray'
        '404':
          description: Not found. No user found with this name.
  /users/{id}/books:
    get:
      summary: Get user's books
      description: Get user's books by user id
      tags:
        - users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: Success. Returns a list of books of the desired user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookResponse'
        '404':
          description: Not found. This user does not have books.
definitions:
  User:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      email:
        type: string
        format: email
        pattern: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+\.([a-z]+)?$/i
      birthDate:
        type: string
      phone:
        type: string
        nullable: true
      address:
        type: string
        nullable: true
      imageUrl:
        type: string
        nullable: true
      imageName:
        type: string
        nullable: true
      admin:
        type: boolean
  Book:
    type: object
    properties:
      id:
        type: string
      userId:
        type: string
      title:
        type: array
      authors:
        type: string
        items: string
      categories:
        type: string
        items: string
      publisher:
        type: string
      publishedDate:
        type: string
      description:
        type: string
      pageCount:
        type: integer
      imageUrl:
        type: string
      imageName:
        type: string
      language:
        type: string
      previewLink:
        type: string
      date:
        type: string
  BookWithUser:
    allOf:
      - $ref: '#/definitions/Book'
      - type: object
        properties:
          userName:
            type: string
          userEmail:
            type: string
            format: email
            pattern: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+\.([a-z]+)?$/i
          userImageUrl:
            type: string
  BookWithUserAndLike:
    allOf:
      - $ref: '#/definitions/BookWithUser'
      - type: object
        properties:
          alreadyLike:
            description: Exists if the logged user has already liked this book
            nullable: true
            type: object
            properties:
              likeId:
                type: string
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    AuthPostResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
          pattern: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+\.([a-z]+)?$/i
        token:
          type: string
        imageUrl:
          type: string
        admin:
          type: boolean
    AuthPostBody:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          pattern: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+\.([a-z]+)?$/i
        password:
          type: string
    VerifyUserBody:
      type: object
      properties:
        token:
          type: string
          description: token sent to registered email
    SendEmailBody:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          pattern: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+\.([a-z]+)?$/i
    VerifyUserResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
          pattern: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+\.([a-z]+)?$/i
    ResetPasswordTokenBody:
      type: object
      required:
        - email
        - newPassword
        - resetToken
      properties:
        newPassword:
          type: string
        resetToken:
          type: string
        email:
          type: string
          format: email
          pattern: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+\.([a-z]+)?$/i
    ResetPasswordBody:
      type: object
      required:
        - email
        - password
        - newPassword
      properties:
        email:
          type: string
          format: email
          pattern: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+\.([a-z]+)?$/i
        password:
          type: string
        newPassword:
          type: string
    UsersArray:
      type: array
      items:
        $ref: '#/definitions/User'
    CreateUserBody:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
          pattern: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+\.([a-z]+)?$/i
        password:
          type: string
        birthDate:
          type: string
        phone:
          type: string
        address:
          type: string
        imageUrl:
          type: string
        imageName:
          type: string
    CreateUserResponse:
      type: object
      $ref: '#/definitions/User'
    GetUserByIdResponse:
      type: object
      $ref: '#/definitions/User'
    DeleteUserByIdResponse:
      type: object
      $ref: '#/definitions/User'
    UpdateUserBody:
      type: object
      required:
      properties:
        name:
          type: string
        email:
          type: string
          format: email
          pattern: /^[a-z0-9.]+@[a-z0-9]+\.[a-z]+\.([a-z]+)?$/i
        birthDate:
          type: string
        phone:
          type: string
        address:
          type: string
        imageUrl:
          type: string
        imageName:
          type: string
    UpdateUserResponse:
      type: object
      $ref: '#/definitions/User'
    PaginatedBookResponse:
      type: object
      properties:
        items:
          $ref: '#/definitions/BookWithUserAndLike'
        totalItems:
          type: integer
